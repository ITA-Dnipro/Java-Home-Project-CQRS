openapi: 3.0.3

info:
  title: HomePage - OpenAPI 3.0
  description: "This is a Home Page sample of Home Project based on the OpenAPI 3.0 specification."
  license:
    name: MIT License
    url: https://opensource.org/licenses/mit-license.php
  contact:
    url: https://github.com/ita-social-projects/Home
  version: 1.0.0

servers:
  - url: /api/0

tags:
  - name: invitations
    description: Invitations managment
  - name: news
    description: News management operations
  - name: user
    description: User management operations
  - name: contact
    description: Contact management operations
  - name: cooperation
    description: Cooperation management
  - name: house
    description: Operations with house
  - name: address
    description: Operations with address
  - name: apartment
    description: Apartment management operations
  - name: apartment ownership
    description: Apartment ownership management operations
  - name: apartment invitation
    description: Apartment invitation management operations
  - name: cooperation poll
    description: Cooperation poll management operations
  - name: poll
    description: Poll management operations  independently from cooperation
  - name: cooperation contact
    description: Cooperation contact management operations
  - name: poll question
    description: Poll question management operations
  - name: polled house
    description: Polled house management operations
  - name: poll vote
    description: Poll vote management operations

paths:
  /invitations/invitation-approval:
    $ref: './paths/invitations.yaml#/invitations-invitationApproval'

  /news:
    $ref: './paths/news.yaml#/news'

  /news/{id}:
    $ref: './paths/news.yaml#/news-newsId'

  /users:
    $ref: './paths/users.yaml#/users'

  /users/{id}:
    $ref: './paths/users.yaml#/users-userId'

  /users/{user_id}/contacts:
    $ref: './paths/contacts.yaml#/users-userId-contacts'

  /users/{user_id}/contacts/{id}:
    $ref: './paths/contacts.yaml#/users-userId-contacts-contactId'

  /cooperation:
    $ref: './paths/cooperations.yaml#/cooperation'

  /cooperation/{id}:
    $ref: './paths/cooperations.yaml#/cooperation-cooperationId'

  /cooperation/{cooperation_id}/houses:
    $ref: './paths/houses.yaml#/cooperation-cooperationId-houses'

  /cooperation/{cooperation_id}/houses/{id}:
    $ref: './paths/houses.yaml#/cooperation-cooperationId-houses-houseId'

  /cooperation/{cooperation_id}/contacts:
    $ref: './paths/cooperationContacts.yaml#/cooperation-cooperationId-contacts'

  /cooperation/{cooperation_id}/contacts/{id}:
    $ref: './paths/cooperationContacts.yaml#/cooperation-cooperationId-contacts-contactId'

  /houses/{house_id}/apartments:
    $ref: './paths/apartments.yaml#/houses-houseId-apartments'

  /houses/{house_id}/apartments/{id}:
    $ref: './paths/apartments.yaml#/houses-houseId-apartments-apartmentId'

  /apartments/{apartment_id}/ownerships:
    $ref: './paths/apartmentOwnerships.yaml#/apartments-apartmentId-ownerships'

  /apartments/{apartment_id}/ownerships/{id}:
    $ref: './paths/apartmentOwnerships.yaml#/apartments-apartmentId-ownerships-ownershipId'

  /apartments/{apartment_id}/invitations:
    $ref: './paths/apartmentInvitations.yaml#/apartments-apartmentId-invitations'

  /apartments/{apartment_id}/invitations/{id}:
    $ref: './paths/apartmentInvitations.yaml#/apartments-apartmentId-invitations-invitationId'

  /cooperation/{cooperation_id}/polls:
    $ref: './paths/cooperationPolls.yaml#/cooperation-cooperationId-polls'

  /cooperation/{cooperation_id}/polls/{id}:
    $ref: './paths/cooperationPolls.yaml#/cooperation-cooperationId-polls-pollId'

  /polls:
    $ref: './paths/polls.yaml#/polls'

  /polls/{id}:
    $ref: './paths/polls.yaml#/polls-pollId'

  /polls/{poll_id}/questions:
    $ref: './paths/pollsQuestions.yaml#/polls-pollId-questions'

  /polls/{poll_id}/questions/{id}:
    $ref: './paths/pollsQuestions.yaml#/polls-pollId-questions-questionId'

  /polls/{poll_id}/houses:
    $ref: './paths/pollsHouses.yaml#/polls-pollId-houses'

  /polls/{poll_id}/houses/{id}:
    $ref: './paths/pollsHouses.yaml#/polls-pollId-houses-houseId'

  /polls/{poll_id}/votes:
    post:
      tags:
        - poll vote
      summary: Create vote
      description: Create a vote in poll. Vote can be created only if poll status is active.
        Number of answers must be validated according to max_answer_count of the question
      operationId: createVote
      parameters:
        - $ref: '#/components/parameters/p_poll_id'
      requestBody:
        $ref: '#/components/requestBodies/CreateVoteBody'
      responses:
        '201':
          $ref: '#/components/responses/VoteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/InternalServerError'

security:
  - basicAuth: [ ]

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

schemas:
  CreateVote:
    type: object
    required:
      - question_votes
    properties:
      question_votes:
        type: array
        items:
          $ref: '#/components/schemas/CreateQuestionVote'
        example:
          [
            {
              "question": { "id": 1 },
              "type": "advice",
              "answer": { "answer": "yellow" }
            },
            {
              "question": { "id": 2 },
              "type": "multiple_choice",
              "answers": [
                { "id": 1 },
                { "id": 3 }
              ]
            }
          ]

  CreateQuestionVote:
    type: object
    required:
      - question
      - type
    discriminator:
      propertyName: type
      mapping:
        multiple_choice: '#/components/schemas/CreateMultipleChoiceQuestionVote'
        advice: '#/components/schemas/CreateAdviceQuestionVote'
    properties:
      type:
        $ref: '#/components/schemas/QuestionType'
      question:
        $ref: '#/components/schemas/QuestionLookup'

  CreateMultipleChoiceQuestionVote:
    allOf:
      - $ref: '#/components/schemas/CreateQuestionVote'
    type: object
    required:
      - answers
    properties:
      answers:
        type: array
        minItems: 1
        items:
          $ref: '#/components/schemas/AnswerVariantLookup'
        example:
          [
            {
              "id": 1
            },
            {
              "id": 3
            }
          ]

  CreateAdviceQuestionVote:
    allOf:
      - $ref: '#/components/schemas/CreateQuestionVote'
    type: object
    required:
      - answer
    properties:
      answer:
        $ref: '#/components/schemas/CreateUpdateAnswerVariant'

  AnswerVariantLookup:
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 1

  ReadVote:
    allOf:
      - $ref: '#/components/schemas/BaseReadView'
    type: object
    properties:
      question_votes:
        type: array
        items:
          $ref: '#/components/schemas/ReadQuestionVote'
        example: { }

  ReadQuestionVote:
    allOf:
      - $ref: '#/components/schemas/BaseReadView'
    type: object
    discriminator:
      propertyName: type
      mapping:
        multiple_choice: '#/components/schemas/ReadMultipleChoiceQuestionVote'
        advice: '#/components/schemas/ReadAdviceQuestionVote'
    properties:
      type:
        $ref: '#/components/schemas/QuestionType'
      question:
        $ref: '#/components/schemas/ReadQuestion'

  ReadMultipleChoiceQuestionVote:
    allOf:
      - $ref: '#/components/schemas/ReadQuestionVote'
    type: object
    required:
      - answers
    properties:
      answers:
        type: array
        minItems: 1
        items:
          $ref: '#/components/schemas/ReadAnswerVariant'
        example:
          - id: 1
            answer: Green
          - id: 2
            answer: Blue

  ReadAdviceQuestionVote:
    allOf:
      - $ref: '#/components/schemas/ReadQuestionVote'
    type: object
    required:
      - answer
    properties:
      answer:
        $ref: '#/components/schemas/ReadAnswerVariant'

  responses:
    VoteResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ReadVote"

  requestBodies:
    CreateVoteBody:
      description: A payload for creating a new vote
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateVote'
      required: true
